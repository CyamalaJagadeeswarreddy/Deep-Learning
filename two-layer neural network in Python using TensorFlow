import tensorflow as tf
import numpy as np
from sklearn.model_selection import train_test_split
# Generate some sample data
np.random.seed(42)
X_data = np.random.rand(100, 1) # Input features
y_data = 2 * X_data + 1 + 0.1 * np.random.randn(100, 1) # Output labels with some noise
# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X_data, y_data, test_size=0.2, random_state=42)
# Define the two-layer neural network model
model = tf.keras.Sequential([
tf.keras.layers.Dense(units=10, input_shape=(1,), activation='relu'), # First hidden layer with ReLU
activation
tf.keras.layers.Dense(units=1, activation='linear') # Output layer with linear activation
])
# Compile the model
model.compile(optimizer='adam', loss='mean_squared_error')
# Train the model
model.fit(X_train, y_train, epochs=100, validation_data=(X_test, y_test))
# Make predictions
X_new = np.array([[0.5]])
predictions = model.predict(X_new)
print("Predictions:", predictions)
